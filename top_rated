#!/usr/bin/env python

from sys import exit, stdout
from collections import defaultdict
# import numpy
import json
import argparse
import logging

from boardgamegeek import BoardGameGeek as BGG
from boardgamegeek.exceptions import BoardGameGeekAPIRetryError, BoardGameGeekAPIError

log = logging.getLogger(__name__)

if __name__ == "__main__":
    desc = ('Show top ratings for a given guild.')
    ap = argparse.ArgumentParser(description=desc, prog='top_rated')
    ap.add_argument('-g', '--guild', dest='guild',
                    help='ID of guild. (bgg does not support guild by name search.')
    ap.add_argument('-n', '--number', dest='number', default=100, type=int,
                    help='How many games to show. (Default=100)')
    ap.add_argument('-c', '--cache', dest='cache', help='The BGG cache to use.',
                    default='/tmp/bgg-cache.db')
    ap.add_argument('-j', '--jsonout', help='The file to write the top rated list to '
                    '(json format: [name, num ratings, mean rating], ...)',
                    default='toprated.json')
    ap.add_argument("-l", "--loglevel", dest="loglevel",
                    help="The level at which to log. Must be one of "
                    "none, debug, info, warning, error, or critical. Default is none. ("
                    "This is mostly used for debugging.)",
                    default='none', choices=['none', 'all', 'debug', 'info', 'warning',
                                             'error', 'critical'])
    args = ap.parse_args()

    if args.guild is None:
        ap.print_help()
        print('\nYou must specify a guild ID with -g (or --guild)')
        exit(1)
    else:
        try:
            int(args.guild)
        except TypeError:
            ap.print_help()
            print('\nGuild value must be a guild ID - an integer.')
            exit(2)

    logLevels = {
        'none': 100,
        'all': 0,
        'debug': logging.DEBUG,
        'info': logging.INFO,
        'warning': logging.WARNING,
        'error': logging.ERROR,
        'critical': logging.CRITICAL
    }
    log_format = '%(asctime)s %(name)-12s %(levelname)-8s %(message)s'
    log_datefmt = '%m-%d %H:%M:%S'
    logging.basicConfig(format=log_format, datefmt=log_datefmt,
                        level=logLevels[args.loglevel])

    def progress_cb(items, total):
        log.debug("fetching items: {}% complete".format(items * 100 / total))

    bgg = BGG(cache='sqlite://{}?ttl=604800'.format(args.cache))
    # bgg = BGG()

    guild = bgg.guild(args.guild, progress=progress_cb)
    if guild is None:
        print('Error fetching guild info.')
        exit(2)

    print('Fetched member information for guild "%s"' % guild.name)

    collections = defaultdict(str)
    print('Fetching %d member collections.' % len(guild.members))

    stdout.flush()

    item_ratings = {}   # item.name --> [rating1, rating2, ..., ratingN]
    ignored_games = ['40834']

    for member in guild.members:
        log.info('Fetching collection for {}'.format(member))
        while True:
            try:
                c = bgg.collection(member)
            except BoardGameGeekAPIRetryError as e:
                log.error('Got BGG retry exception: {}'.format(e))
                continue
            except BoardGameGeekAPIError as e:
                log.error('Got BGG exception: {}'.format(e))

            break

        if not c:
            print('Error fetching collection for %s' % member)
            continue

        collections[member] = c
        for item in c.items:
            if item.id not in ignored_games:
                if not str(item.name) in item_ratings:
                    item_ratings[str(item.name)] = []

                if getattr(item, 'rating', None):
                    item_ratings[str(item.name)].append(item.rating)

            else:
                log.debug('Ignoring ignorable game: {}'.format(str(item.name)))

    log.info('README: Found {} items from {} collections with {} '
             'ratings'.format(len(item_ratings.keys()),
                              len(collections),
                              sum([len(x) for x in item_ratings.values()])))

    # filter out items that have not been rated by at least %5 of the guild
    # min_rating = int(len(collections) * 0.05)
    min_rating = int(len(collections) * 0.05)
    item_ratings = {k: v for k, v in item_ratings.items() if len(item_ratings[k]) > min_rating}

    log.info('README: After trimming %5 ratings (must be rated {} times): '
             'Found {} items with {} ratings'.format(
                 min_rating, len(item_ratings.keys()),
                 sum([len(x) for x in item_ratings.values()])))

    is_full_game = {}
    game_ids = {}
    for game in item_ratings.keys():
        log.info('fetching {}'.format(game))
        g = bgg.game(game)
        # if not hasattr(g, 'rating') or not hasattr(g, 'categories'):
        if not hasattr(g, 'categories'):
            log.info('{} has no categories, ignoring'.format(game))
            is_full_game[game] = False
            continue
        if 'Expansion for Base-game' not in g.categories:
            is_full_game[game] = True
            rate = getattr(g, 'rating', 5.5)
            game_ids[game] = {'bggid': str(g.id), 'bggrating': rate}
        else:
            is_full_game[game] = False

    # now filter out non-full games.
    item_ratings = {k: v for k, v in item_ratings.items() if is_full_game[k]}

    log.info('README: After trimming not-full-games: '
             'Found {} items with {} ratings'.format(
                 len(item_ratings.keys()), sum([len(x) for x in item_ratings.values()])))

    stats = []
    for name, data in item_ratings.items():
        # [name, N, mean]
        stats.append([
            name,                           # game name
            len(data),                      # num raters
            float(sum(data)) / len(data),   # avg reddit rating
        ])

    print()

    # top is list of game names sorted by mean.
    top = sorted(stats, key=lambda x: x[2], reverse=True)
    towrite = {
        'game_ratings': top,
        'rating_threshold': min_rating,
        'num_raters': int(len(collections)),
        'total_ratings': sum([len(x) for x in item_ratings.values()]),
        'game_ids': game_ids
    }
    with open(args.jsonout, 'w') as fd:
        json.dump(towrite, fd)

    log.info('Wrote top rated data to {}'.format(args.jsonout))

    exit(0)
